#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

PROFILE_PATH=".profile.d/julia.sh"

set-env() {
  echo "export $1=$2" >> $PROFILE_PATH
}

# parse args
BUILD_DIR=$1
CACHE_DIR=$2

BP_DIR=`cd $(dirname $0); cd ..; pwd`

cd ${BUILD_DIR}

echo -n "-----> Installing julia ...."

deps="https://julialang.s3.amazonaws.com/bin/linux/x64/0.5/julia-0.5.0-linux-x86_64.tar.gz"

for dep in $deps; do
  depb=$(basename $dep)
  echo "        - $depb"
  curl -LO $dep
  tar -xzf $depb
  rm $depb
done


set-env PATH '$HOME/.apt/usr/bin:$HOME/julia-3c9d75391c/bin:$PATH'
set-env LIBRARY_PATH '$HOME/.apt/usr/lib/x86_64-linux-gnu:$HOME/julia-3c9d75391c/lib:$HOME/julia-3c9d75391c/lib/x86_64-linux-gnu:$LIBRARY_PATH'
set-env LD_LIBRARY_PATH '$HOME/.apt/usr/lib/x86_64-linux-gnu:$HOME/julia-3c9d75391c/lib:$HOME/julia-3c9d75391c/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH'

export LIBRARY_PATH=./.apt/usr/lib/x86_64-linux-gnu:./julia-3c9d75391c/lib:./julia-3c9d75391c/lib/x86_64-linux-gnu:$LIBRARY_PATH
export LD_LIBRARY_PATH=./.apt/usr/lib/x86_64-linux-gnu:./julia-3c9d75391c/lib:./julia-3c9d75391c/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH
export PATH=./.apt/usr/bin:./julia-3c9d75391c/bin:$PATH
echo $PATH
echo $LD_LIBRARY_PATH
echo $(cmake -version)
echo $(julia -v)

# dep="https://github.com/JuliaLang/julia/releases/download/v0.3.7/julia-0.3.7_cb9bcae93a.tar.gz"
# depb=$(basename $dep)
# echo "        - $depb"
# curl -LO $dep
# tar -zxf $depb
# cd julia
# make

echo " done"

if [ "${PIPESTATUS[*]}" != "0" ]; then
  echo " !     Failed to install ${JULIA_DIST}"
  exit 1
fi


# these are not presistent in heroku
julia -e "Pkg.update()"
while IFS='' read -r julia_dep || [[ -n "$julia_dep" ]]; do
  if [[ $julia_dep == https://github.com* ]]; then
    echo 'in clone'
        array=( $julia_dep )
        if [[ ${#array[@]} > 1 ]]; then
        julia -e "Pkg.clone(\"${array[0]}\")"
        julia -e "Pkg.checkout(\"${array[1]}\",\"${array[2]}\")"
        julia -e "using ${array[1]}"
    else
        julia -e "Pkg.clone(\"$julia_dep\")"
    fi
  else
    array=( $julia_dep )
    if [[ ${#array[@]} > 1 ]]; then
        julia -e "Pkg.add(\"${array[0]}\")"
        julia -e "Pkg.pin(\"${array[0]}\",v\"${array[1]}\")"
        julia -e "using ${array[0]}"
        if [[ "${array[0]} " == "Plotly" ]]
            julia -e "using Blink;Blink.AtomShell.install()"
        fi
    else
        julia -e "Pkg.add(\"$julia_dep\")"
        julia -e "using $julia_dep"
        if [[ "${array[0]} " == "Plotly" ]]
            julia -e "using Blink;Blink.AtomShell.install()"
        fi
    fi
  fi 

done < "REQUIRE"

cp -r ~/.julia ${BUILD_DIR}/.julia
